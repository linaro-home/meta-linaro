From 0b7c40e59ec5f6da80c150e9feadaeeed19a00ce Mon Sep 17 00:00:00 2001
From: Maxim Uvarov <maxim.uvarov@linaro.org>
Date: Mon, 10 Feb 2014 13:38:26 +0400
Subject: [PATCH] openvpn demo: implement I/O from shared memory

Openvpn watches for events from sockets. For demo sockets
replaced with shared memory. We replace waiting events
on sockets with shared memory events.

Signed-off-by: Maxim Uvarov <maxim.uvarov@linaro.org>
---
 openvpn-odpshm.cfg     | 32 +++++++++++++++++++
 src/openvpn/forward.c  | 83 +++++++++++++++++++++++++++++++++++---------------
 src/openvpn/odp_ipcd.h | 11 +++++++
 src/openvpn/openvpn.c  | 51 +++++++++++++++++++++++++++++++
 src/openvpn/options.c  |  6 ++++
 src/openvpn/options.h  |  1 +
 src/openvpn/socket.c   |  5 +++
 src/openvpn/socket.h   | 12 +++++++-
 8 files changed, 176 insertions(+), 25 deletions(-)
 create mode 100644 openvpn-odpshm.cfg
 create mode 100644 src/openvpn/odp_ipcd.h

diff --git a/openvpn-odpshm.cfg b/openvpn-odpshm.cfg
new file mode 100644
index 0000000..7c1690d
--- /dev/null
+++ b/openvpn-odpshm.cfg
@@ -0,0 +1,32 @@
+# Perform a TLS loopback test -- client side.
+#
+# This test performs a TLS negotiation once every 10 seconds,
+# and will terminate after 2 minutes.
+#
+# From the root directory of the OpenVPN distribution,
+# after openvpn has been built, run:
+#
+#  ./openvpn --config sample-config-files/loopback-client  (In one window)
+#  ./openvpn --config sample-config-files/loopback-server  (Simultaneously in another window)
+
+rport 777
+lport 555
+remote 195.0.0.2
+local 195.0.0.1
+dev tun0
+verb 7
+#disable-occ
+#reneg-sec 10
+#tls-client
+#ca sample-keys/ca.crt
+#key sample-keys/client.key
+#cert sample-keys/client.crt
+#cipher DES-EDE3-CBC
+ping 3
+inactive 12000 10000000
+
+# 10.1.0.2 is our local VPN endpoint (home).
+# 10.1.0.1 is our remote VPN endpoint (office).
+ifconfig 10.1.0.2 10.1.0.1
+# odp-shm
+
diff --git a/src/openvpn/forward.c b/src/openvpn/forward.c
index 0ec00f3..809949a 100644
--- a/src/openvpn/forward.c
+++ b/src/openvpn/forward.c
@@ -47,6 +47,10 @@
 #include "ping-inline.h"
 #include "mstats.h"
 
+#include "odp_ipcd.h"
+extern struct odp_ipc_shm* odp_ipc_shm;
+
+
 counter_type link_read_bytes_global;  /* GLOBAL */
 counter_type link_write_bytes_global; /* GLOBAL */
 
@@ -671,10 +675,17 @@ read_incoming_link (struct context *c)
   c->c2.buf = c->c2.buffers->read_link_buf;
   ASSERT (buf_init (&c->c2.buf, FRAME_HEADROOM_ADJ (&c->c2.frame, FRAME_HEADROOM_MARKER_READ_LINK)));
 
-  status = link_socket_read (c->c2.link_socket,
-			     &c->c2.buf,
-			     MAX_RW_SIZE_LINK (&c->c2.frame),
-			     &c->c2.from);
+  if (!c->options.odp_shm) {
+	  status = link_socket_read (c->c2.link_socket,
+			  &c->c2.buf,
+			  MAX_RW_SIZE_LINK (&c->c2.frame),
+			  &c->c2.from);
+  } else {
+	  memcpy(BPTR(&c->c2.buf), odp_ipc_shm->out_p, *odp_ipc_shm->out_len);
+	  c->c2.buf.len = *odp_ipc_shm->out_len;
+	  status = *odp_ipc_shm->out_len;
+	  *odp_ipc_shm->out_len = 0;
+  }
 
   if (socket_connection_reset (c->c2.link_socket, status))
     {
@@ -792,9 +803,11 @@ process_incoming_link (struct context *c)
    */
   if (c->c2.buf.len > 0)
     {
-      if (!link_socket_verify_incoming_addr (&c->c2.buf, lsi, &c->c2.from))
-	link_socket_bad_incoming_addr (&c->c2.buf, lsi, &c->c2.from);
 
+      if (!c->options.odp_shm) {
+	if (!link_socket_verify_incoming_addr (&c->c2.buf, lsi, &c->c2.from))
+		link_socket_bad_incoming_addr (&c->c2.buf, lsi, &c->c2.from);
+      }
 #ifdef ENABLE_CRYPTO
 #ifdef ENABLE_SSL
       if (c->c2.tls_multi)
@@ -889,7 +902,8 @@ process_incoming_link (struct context *c)
 	{
 	  dmsg (D_PING, "RECEIVED PING PACKET");
 	  c->c2.buf.len = 0; /* drop packet */
-	}
+	} else
+		dmsg (D_PING, "RECEIVED NOT PING PACKET");
 
 #ifdef ENABLE_OCC
       /* Did we just receive an OCC packet? */
@@ -1139,9 +1153,14 @@ process_outgoing_link (struct context *c)
 	    socks_preprocess_outgoing_link (c, &to_addr, &size_delta);
 #endif
 	    /* Send packet */
+	    if (!c->options.odp_shm) {
 	    size = link_socket_write (c->c2.link_socket,
 				      &c->c2.to_link,
 				      to_addr);
+	    } else {
+		    memcpy(odp_ipc_shm->in_p, BPTR(&c->c2.to_link), BLEN(&c->c2.to_link));
+		    *odp_ipc_shm->in_len = BLEN(&c->c2.to_link);
+	    }
 
 #ifdef ENABLE_SOCKS
 	    /* Undo effect of prepend */
@@ -1445,6 +1464,13 @@ io_wait_dowork (struct context *c, const unsigned int flags)
   if (flags & IOW_READ_TUN_FORCE)
     tuntap |= EVENT_READ;
 
+  if (c->options.odp_shm) {
+   if (*odp_ipc_shm->out_len > 0)
+	socket |= EVENT_READ;
+   if (*odp_ipc_shm->in_len == 0)
+	socket |= EVENT_WRITE;
+  }
+
   /*
    * Configure event wait based on socket, tuntap flags.
    */
@@ -1482,24 +1508,33 @@ io_wait_dowork (struct context *c, const unsigned int flags)
 	  /*
 	   * Wait for something to happen.
 	   */
-	  status = event_wait (c->c2.event_set, &c->c2.timeval, esr, SIZE(esr));
-
-	  check_status (status, "event_wait", NULL, NULL);
+	  if (c->options.odp_shm && *odp_ipc_shm->out_len > 0) {
+		  c->c2.event_set_status = SOCKET_READ;
+		  return;
+	  }
 
-	  if (status > 0)
-	    {
-	      int i;
-	      c->c2.event_set_status = 0;
-	      for (i = 0; i < status; ++i)
-		{
-		  const struct event_set_return *e = &esr[i];
-		  c->c2.event_set_status |= ((e->rwflags & 3) << *((int*)e->arg));
-		}
-	    }
-	  else if (status == 0)
-	    {
-	      c->c2.event_set_status = ES_TIMEOUT;
-	    }
+	  if (c->options.odp_shm && *odp_ipc_shm->in_len == 0)
+		  c->c2.event_set_status = SOCKET_WRITE;
+	  else {
+		  status = event_wait (c->c2.event_set, &c->c2.timeval, esr, SIZE(esr));
+
+		  check_status (status, "event_wait", NULL, NULL);
+
+		  if (status > 0)
+		  {
+			  int i;
+			  c->c2.event_set_status = 0;
+			  for (i = 0; i < status; ++i)
+			  {
+				  const struct event_set_return *e = &esr[i];
+				  c->c2.event_set_status |= ((e->rwflags & 3) << *((int*)e->arg));
+			  }
+		  }
+		  else if (status == 0)
+		  {
+			  c->c2.event_set_status = ES_TIMEOUT;
+		  }
+	  }
 	}
       else
 	{
diff --git a/src/openvpn/odp_ipcd.h b/src/openvpn/odp_ipcd.h
new file mode 100644
index 0000000..61889cc
--- /dev/null
+++ b/src/openvpn/odp_ipcd.h
@@ -0,0 +1,11 @@
+#include <sys/types.h>
+
+/* shm */
+struct odp_ipc_shm {
+	unsigned char *in_p; //incomming packet
+	unsigned int *in_len;
+	unsigned char *out_p;
+	unsigned int *out_len;
+	unsigned long *magic_odp;
+	unsigned long *magic_app;
+};
diff --git a/src/openvpn/openvpn.c b/src/openvpn/openvpn.c
index 5125eae..ee993bd 100644
--- a/src/openvpn/openvpn.c
+++ b/src/openvpn/openvpn.c
@@ -39,6 +39,12 @@
 
 #include "forward-inline.h"
 
+#include "odp_ipcd.h"
+struct odp_ipc_shm* odp_ipc_shm = NULL;
+/*socket_bind does not have context, so use global var
+ * to save code line */
+int odp_shm_mode = 0;
+
 #define P2P_CHECK_SIG() EVENT_LOOP_CHECK_SIGNAL (c, process_signal_p2p, c);
 
 static bool
@@ -107,6 +113,48 @@ tunnel_point_to_point (struct context *c)
 #undef PROCESS_SIGNAL_P2P
 
 
+static int odp_ipc_app_shm_init(void)
+{
+	int key = 5001;
+	unsigned long shm_size = 4096 + 9000 + 9000;
+	int shmid;
+	void *shm;
+
+	shmid = shmget(key, shm_size, 0666);
+	if (shmid < 0) {
+		printf("unble to connect to shared memory\n");
+		exit(0);
+	}
+
+	shm = shmat(shmid, (char*)NULL, 0);
+	if (!shm) {
+		perror("shmat");
+		exit(1);
+	}
+
+	odp_ipc_shm = (void*)malloc(sizeof(struct odp_ipc_shm));
+	if (!odp_ipc_shm)
+		fprintf(stderr, "   Error: unable to allocate odp_ipc_shm\n");
+
+	odp_ipc_shm->in_p = (void*)((char*)shm + 4096);
+	odp_ipc_shm->in_len = (void *)((char*)shm + 100);
+	odp_ipc_shm->out_p = (void*)((char*)shm + 4096  + 9000);
+	odp_ipc_shm->out_len = (void*)((char*)shm + 110);
+
+	odp_ipc_shm->magic_odp = (void*)shm;
+	odp_ipc_shm->magic_app = (void*)((char*)shm + 10);
+
+	*odp_ipc_shm->magic_app = 0xbeaf;
+
+	printf("odp magic 0x%lx\n", *odp_ipc_shm->magic_app);
+
+	//memcpy(odp_ipc_shm->in_p, "test data", 9);
+	//memcpy(odp_ipc_shm->out_p, "test data", 9);
+
+	return 0;
+}
+
+
 /**************************************************************************/
 /**
  * OpenVPN's main init-run-cleanup loop.
@@ -187,6 +235,9 @@ openvpn_main (int argc, char *argv[])
 	  /* parse command line options, and read configuration file */
 	  parse_argv (&c.options, argc, argv, M_USAGE, OPT_P_DEFAULT, NULL, c.es);
 
+	 if (c.options.odp_shm)
+		odp_ipc_app_shm_init();
+
 #ifdef ENABLE_PLUGIN
 	  /* plugins may contribute options configuration */
 	  init_verb_mute (&c, IVM_LEVEL_1);
diff --git a/src/openvpn/options.c b/src/openvpn/options.c
index 6d9c3b8..aac8a69 100644
--- a/src/openvpn/options.c
+++ b/src/openvpn/options.c
@@ -4418,6 +4418,12 @@ add_option (struct options *options,
       VERIFY_PERMISSION (OPT_P_GENERAL);
       options->remote_random = true;
     }
+  else if (streq (p[0], "odp-shm"))
+    {
+      VERIFY_PERMISSION (OPT_P_GENERAL);
+      options->odp_shm = true;
+      odp_shm_mode = 1;
+    }
   else if (streq (p[0], "connection") && p[1])
     {
       VERIFY_PERMISSION (OPT_P_GENERAL);
diff --git a/src/openvpn/options.h b/src/openvpn/options.h
index 95e67df..2a4ff89 100644
--- a/src/openvpn/options.h
+++ b/src/openvpn/options.h
@@ -223,6 +223,7 @@ struct options
   struct remote_host_store *rh_store;
 
   bool remote_random;
+  bool odp_shm;
   const char *ipchange;
   const char *dev;
   const char *dev_type;
diff --git a/src/openvpn/socket.c b/src/openvpn/socket.c
index 100eedd..0f034e1 100644
--- a/src/openvpn/socket.c
+++ b/src/openvpn/socket.c
@@ -41,6 +41,7 @@
 #include "manage.h"
 
 #include "memdbg.h"
+extern int odp_do_bind;
 
 const int proto_overhead[] = { /* indexed by PROTO_x */
   0,
@@ -916,6 +917,7 @@ socket_bind (socket_descriptor_t sd,
 	  msg (M_NONFATAL|M_ERRNO, "Setting IPV6_V6ONLY=%d failed", v6only);
 	}
     }
+if (!odp_shm_mode) {
   if (bind (sd, cur->ai_addr, cur->ai_addrlen))
     {
       const int errnum = openvpn_errno ();
@@ -924,6 +926,7 @@ socket_bind (socket_descriptor_t sd,
            print_sockaddr_ex (local->ai_addr, ":", PS_SHOW_PORT, &gc),
            strerror_ts (errnum, &gc));
     }
+  }
   gc_free (&gc);
 }
 
@@ -2498,6 +2501,8 @@ proto_is_dgram(int proto)
 bool
 proto_is_udp(int proto)
 {
+  if (odp_shm_mode)
+	  return true;
   if (proto < 0 || proto >= PROTO_N)
     ASSERT(0);
   return proto == PROTO_UDP;
diff --git a/src/openvpn/socket.h b/src/openvpn/socket.h
index e0e0fff..2e6938f 100644
--- a/src/openvpn/socket.h
+++ b/src/openvpn/socket.h
@@ -35,7 +35,7 @@
 #include "proxy.h"
 #include "socks.h"
 #include "misc.h"
-
+extern int odp_shm_mode;
 /*
  * OpenVPN's default port number as assigned by IANA.
  */
@@ -621,12 +621,16 @@ addr_defined_ipi (const struct link_socket_actual *lsa)
 static inline bool
 link_socket_actual_defined (const struct link_socket_actual *act)
 {
+  if (odp_shm_mode)
+	return true;
   return act && addr_defined (&act->dest);
 }
 
 static inline bool
 addr_match (const struct openvpn_sockaddr *a1, const struct openvpn_sockaddr *a2)
 {
+ if (odp_shm_mode)
+	 return true;
   switch(a1->addr.sa.sa_family) {
     case AF_INET:
       return a1->addr.in4.sin_addr.s_addr == a2->addr.in4.sin_addr.s_addr;
@@ -640,6 +644,8 @@ addr_match (const struct openvpn_sockaddr *a1, const struct openvpn_sockaddr *a2
 static inline bool
 addrlist_match (const struct openvpn_sockaddr *a1, const struct addrinfo *addrlist)
 {
+  if (odp_shm_mode)
+	  return true;
   const struct addrinfo *curele;
   for (curele = addrlist; curele; curele=curele->ai_next)
     {
@@ -677,6 +683,8 @@ addr_host (const struct openvpn_sockaddr *addr)
 static inline bool
 addrlist_port_match (const struct openvpn_sockaddr *a1, const struct addrinfo *a2)
 {
+  if (odp_shm_mode)
+	  return true;
   const struct addrinfo *curele;
   for(curele=a2;curele;curele = curele->ai_next)
     {
@@ -706,6 +714,8 @@ addrlist_port_match (const struct openvpn_sockaddr *a1, const struct addrinfo *a
 static inline bool
 addr_port_match (const struct openvpn_sockaddr *a1, const struct openvpn_sockaddr *a2)
 {
+  if (odp_shm_mode)
+	  return true;
   switch(a1->addr.sa.sa_family) {
     case AF_INET:
       return a1->addr.in4.sin_addr.s_addr == a2->addr.in4.sin_addr.s_addr
-- 
1.8.5.1.163.gd7aced9

